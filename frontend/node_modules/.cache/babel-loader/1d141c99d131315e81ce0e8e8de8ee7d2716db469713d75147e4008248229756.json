{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config/config';\nconst API_URL = config.API_URL;\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const orderService = {\n  // Create order - save to both backend and localStorage\n  createOrder: async orderData => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/orders', orderData);\n\n      // Save to user-specific localStorage key\n      const userEmail = orderData.customerEmail || orderData.email;\n      const userSpecificKey = `userOrders_${userEmail}`;\n      const existingOrders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      existingOrders.push({\n        ...orderData,\n        orderId: response.data.order._id,\n        createdAt: response.data.order.createdAt,\n        status: response.data.order.status\n      });\n      localStorage.setItem(userSpecificKey, JSON.stringify(existingOrders));\n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving order locally:', error.message);\n      const orderId = 'local_' + Date.now();\n      const localOrder = {\n        ...orderData,\n        orderId,\n        createdAt: new Date().toISOString(),\n        status: 'pending',\n        isLocal: true\n      };\n      const userEmail = orderData.customerEmail || orderData.email;\n      const userSpecificKey = `userOrders_${userEmail}`;\n      const existingOrders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      existingOrders.push(localOrder);\n      localStorage.setItem(userSpecificKey, JSON.stringify(existingOrders));\n      return {\n        success: true,\n        order: localOrder\n      };\n    }\n  },\n  // Get user orders - try backend first, fallback to localStorage\n  getUserOrders: async () => {\n    try {\n      const response = await api.get('/orders/user');\n\n      // Get user email from token or current user\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      const localOrders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      const allOrders = [...response.data.orders, ...localOrders.filter(o => o.isLocal)];\n      return allOrders;\n    } catch (error) {\n      console.warn('Backend unavailable, using local orders:', error.message);\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      return JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n    }\n  },\n  // Update order status\n  updateOrderStatus: async (orderId, status) => {\n    try {\n      const response = await api.put(`/orders/${orderId}/status`, {\n        status\n      });\n\n      // Update user-specific localStorage\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      const orders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      const orderIndex = orders.findIndex(o => o.orderId === orderId);\n      if (orderIndex > -1) {\n        orders[orderIndex].status = status;\n        localStorage.setItem(userSpecificKey, JSON.stringify(orders));\n      }\n      return response.data;\n    } catch (error) {\n      // Update only localStorage if backend fails\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      const orders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      const orderIndex = orders.findIndex(o => o.orderId === orderId);\n      if (orderIndex > -1) {\n        orders[orderIndex].status = status;\n        localStorage.setItem(userSpecificKey, JSON.stringify(orders));\n      }\n      throw error;\n    }\n  }\n};\nexport default orderService;","map":{"version":3,"names":["axios","config","API_URL","api","create","baseURL","headers","interceptors","request","use","token","localStorage","getItem","Authorization","error","Promise","reject","orderService","createOrder","orderData","response","post","userEmail","customerEmail","email","userSpecificKey","existingOrders","JSON","parse","push","orderId","data","order","_id","createdAt","status","setItem","stringify","console","warn","message","Date","now","localOrder","toISOString","isLocal","success","getUserOrders","get","currentUser","localOrders","allOrders","orders","filter","o","updateOrderStatus","put","orderIndex","findIndex"],"sources":["d:/project1/stitch_and_savour/frontend/src/services/orderService.js"],"sourcesContent":["import axios from 'axios';\n\nimport { config } from '../config/config';\n\nconst API_URL = config.API_URL;\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport const orderService = {\n  // Create order - save to both backend and localStorage\n  createOrder: async (orderData) => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/orders', orderData);\n      \n      // Save to user-specific localStorage key\n      const userEmail = orderData.customerEmail || orderData.email;\n      const userSpecificKey = `userOrders_${userEmail}`;\n      const existingOrders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      existingOrders.push({\n        ...orderData,\n        orderId: response.data.order._id,\n        createdAt: response.data.order.createdAt,\n        status: response.data.order.status\n      });\n      localStorage.setItem(userSpecificKey, JSON.stringify(existingOrders));\n      \n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving order locally:', error.message);\n      const orderId = 'local_' + Date.now();\n      const localOrder = {\n        ...orderData,\n        orderId,\n        createdAt: new Date().toISOString(),\n        status: 'pending',\n        isLocal: true\n      };\n      \n      const userEmail = orderData.customerEmail || orderData.email;\n      const userSpecificKey = `userOrders_${userEmail}`;\n      const existingOrders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      existingOrders.push(localOrder);\n      localStorage.setItem(userSpecificKey, JSON.stringify(existingOrders));\n      \n      return { success: true, order: localOrder };\n    }\n  },\n\n  // Get user orders - try backend first, fallback to localStorage\n  getUserOrders: async () => {\n    try {\n      const response = await api.get('/orders/user');\n      \n      // Get user email from token or current user\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      const localOrders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      const allOrders = [...response.data.orders, ...localOrders.filter(o => o.isLocal)];\n      \n      return allOrders;\n    } catch (error) {\n      console.warn('Backend unavailable, using local orders:', error.message);\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      return JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n    }\n  },\n\n  // Update order status\n  updateOrderStatus: async (orderId, status) => {\n    try {\n      const response = await api.put(`/orders/${orderId}/status`, { status });\n      \n      // Update user-specific localStorage\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      const orders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      const orderIndex = orders.findIndex(o => o.orderId === orderId);\n      if (orderIndex > -1) {\n        orders[orderIndex].status = status;\n        localStorage.setItem(userSpecificKey, JSON.stringify(orders));\n      }\n      \n      return response.data;\n    } catch (error) {\n      // Update only localStorage if backend fails\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const userSpecificKey = `userOrders_${currentUser.email}`;\n      const orders = JSON.parse(localStorage.getItem(userSpecificKey) || '[]');\n      const orderIndex = orders.findIndex(o => o.orderId === orderId);\n      if (orderIndex > -1) {\n        orders[orderIndex].status = status;\n        localStorage.setItem(userSpecificKey, JSON.stringify(orders));\n      }\n      throw error;\n    }\n  }\n};\n\nexport default orderService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}