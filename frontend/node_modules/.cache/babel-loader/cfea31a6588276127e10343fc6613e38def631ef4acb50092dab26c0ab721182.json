{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config/config';\nconst API_URL = config.API_URL;\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const reviewService = {\n  // Create review - save to both backend and localStorage\n  createReview: async reviewData => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/reviews', reviewData);\n\n      // If backend succeeds, also save to localStorage\n      const existingReviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n      existingReviews.push({\n        ...reviewData,\n        id: response.data.review._id,\n        createdAt: response.data.review.createdAt\n      });\n      localStorage.setItem('productReviews', JSON.stringify(existingReviews));\n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving review locally:', error.message);\n      const localReview = {\n        ...reviewData,\n        id: 'local_' + Date.now(),\n        createdAt: new Date().toISOString(),\n        isLocal: true\n      };\n      const existingReviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n      existingReviews.push(localReview);\n      localStorage.setItem('productReviews', JSON.stringify(existingReviews));\n      return {\n        success: true,\n        review: localReview\n      };\n    }\n  },\n  // Get reviews for a product - try backend first, fallback to localStorage\n  getProductReviews: async productId => {\n    try {\n      const response = await api.get(`/reviews/product/${productId}`);\n\n      // Merge with local reviews\n      const localReviews = JSON.parse(localStorage.getItem('productReviews') || '[]').filter(r => r.productId === productId && r.isLocal);\n      return [...response.data.reviews, ...localReviews];\n    } catch (error) {\n      console.warn('Backend unavailable, using local reviews:', error.message);\n      return JSON.parse(localStorage.getItem('productReviews') || '[]').filter(r => r.productId === productId);\n    }\n  },\n  // Get all reviews - try backend first, fallback to localStorage\n  getAllReviews: async () => {\n    try {\n      const response = await api.get('/reviews');\n\n      // Merge with local reviews\n      const localReviews = JSON.parse(localStorage.getItem('productReviews') || '[]').filter(r => r.isLocal);\n      return [...response.data.reviews, ...localReviews];\n    } catch (error) {\n      console.warn('Backend unavailable, using local reviews:', error.message);\n      return JSON.parse(localStorage.getItem('productReviews') || '[]');\n    }\n  }\n};\nexport default reviewService;","map":{"version":3,"names":["axios","config","API_URL","api","create","baseURL","headers","interceptors","request","use","token","localStorage","getItem","Authorization","error","Promise","reject","reviewService","createReview","reviewData","response","post","existingReviews","JSON","parse","push","id","data","review","_id","createdAt","setItem","stringify","console","warn","message","localReview","Date","now","toISOString","isLocal","success","getProductReviews","productId","get","localReviews","filter","r","reviews","getAllReviews"],"sources":["D:/project1/stitch_and_savour/frontend/src/services/reviewService.js"],"sourcesContent":["import axios from 'axios';\n\nimport { config } from '../config/config';\n\nconst API_URL = config.API_URL;\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport const reviewService = {\n  // Create review - save to both backend and localStorage\n  createReview: async (reviewData) => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/reviews', reviewData);\n      \n      // If backend succeeds, also save to localStorage\n      const existingReviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n      existingReviews.push({\n        ...reviewData,\n        id: response.data.review._id,\n        createdAt: response.data.review.createdAt\n      });\n      localStorage.setItem('productReviews', JSON.stringify(existingReviews));\n      \n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving review locally:', error.message);\n      const localReview = {\n        ...reviewData,\n        id: 'local_' + Date.now(),\n        createdAt: new Date().toISOString(),\n        isLocal: true\n      };\n      \n      const existingReviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n      existingReviews.push(localReview);\n      localStorage.setItem('productReviews', JSON.stringify(existingReviews));\n      \n      return { success: true, review: localReview };\n    }\n  },\n\n  // Get reviews for a product - try backend first, fallback to localStorage\n  getProductReviews: async (productId) => {\n    try {\n      const response = await api.get(`/reviews/product/${productId}`);\n      \n      // Merge with local reviews\n      const localReviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\n        .filter(r => r.productId === productId && r.isLocal);\n      \n      return [...response.data.reviews, ...localReviews];\n    } catch (error) {\n      console.warn('Backend unavailable, using local reviews:', error.message);\n      return JSON.parse(localStorage.getItem('productReviews') || '[]')\n        .filter(r => r.productId === productId);\n    }\n  },\n\n  // Get all reviews - try backend first, fallback to localStorage\n  getAllReviews: async () => {\n    try {\n      const response = await api.get('/reviews');\n      \n      // Merge with local reviews\n      const localReviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\n        .filter(r => r.isLocal);\n      \n      return [...response.data.reviews, ...localReviews];\n    } catch (error) {\n      console.warn('Backend unavailable, using local reviews:', error.message);\n      return JSON.parse(localStorage.getItem('productReviews') || '[]');\n    }\n  }\n};\n\nexport default reviewService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAO;;AAE9B;AACA,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBR,MAAM,IAAK;EACV,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTT,MAAM,CAACK,OAAO,CAACO,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOT,MAAM;AACf,CAAC,EACAa,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG;EAC3B;EACAC,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,UAAU,EAAEF,UAAU,CAAC;;MAEvD;MACA,MAAMG,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC;MAClFU,eAAe,CAACG,IAAI,CAAC;QACnB,GAAGN,UAAU;QACbO,EAAE,EAAEN,QAAQ,CAACO,IAAI,CAACC,MAAM,CAACC,GAAG;QAC5BC,SAAS,EAAEV,QAAQ,CAACO,IAAI,CAACC,MAAM,CAACE;MAClC,CAAC,CAAC;MACFnB,YAAY,CAACoB,OAAO,CAAC,gBAAgB,EAAER,IAAI,CAACS,SAAS,CAACV,eAAe,CAAC,CAAC;MAEvE,OAAOF,QAAQ,CAACO,IAAI;IACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;MACd;MACAmB,OAAO,CAACC,IAAI,CAAC,6CAA6C,EAAEpB,KAAK,CAACqB,OAAO,CAAC;MAC1E,MAAMC,WAAW,GAAG;QAClB,GAAGjB,UAAU;QACbO,EAAE,EAAE,QAAQ,GAAGW,IAAI,CAACC,GAAG,CAAC,CAAC;QACzBR,SAAS,EAAE,IAAIO,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;QACnCC,OAAO,EAAE;MACX,CAAC;MAED,MAAMlB,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC;MAClFU,eAAe,CAACG,IAAI,CAACW,WAAW,CAAC;MACjCzB,YAAY,CAACoB,OAAO,CAAC,gBAAgB,EAAER,IAAI,CAACS,SAAS,CAACV,eAAe,CAAC,CAAC;MAEvE,OAAO;QAAEmB,OAAO,EAAE,IAAI;QAAEb,MAAM,EAAEQ;MAAY,CAAC;IAC/C;EACF,CAAC;EAED;EACAM,iBAAiB,EAAE,MAAOC,SAAS,IAAK;IACtC,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMjB,GAAG,CAACyC,GAAG,CAAC,oBAAoBD,SAAS,EAAE,CAAC;;MAE/D;MACA,MAAME,YAAY,GAAGtB,IAAI,CAACC,KAAK,CAACb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,CAC5EkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACJ,SAAS,KAAKA,SAAS,IAAII,CAAC,CAACP,OAAO,CAAC;MAEtD,OAAO,CAAC,GAAGpB,QAAQ,CAACO,IAAI,CAACqB,OAAO,EAAE,GAAGH,YAAY,CAAC;IACpD,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdmB,OAAO,CAACC,IAAI,CAAC,2CAA2C,EAAEpB,KAAK,CAACqB,OAAO,CAAC;MACxE,OAAOZ,IAAI,CAACC,KAAK,CAACb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,CAC9DkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACJ,SAAS,KAAKA,SAAS,CAAC;IAC3C;EACF,CAAC;EAED;EACAM,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAMjB,GAAG,CAACyC,GAAG,CAAC,UAAU,CAAC;;MAE1C;MACA,MAAMC,YAAY,GAAGtB,IAAI,CAACC,KAAK,CAACb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,CAC5EkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,OAAO,CAAC;MAEzB,OAAO,CAAC,GAAGpB,QAAQ,CAACO,IAAI,CAACqB,OAAO,EAAE,GAAGH,YAAY,CAAC;IACpD,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdmB,OAAO,CAACC,IAAI,CAAC,2CAA2C,EAAEpB,KAAK,CAACqB,OAAO,CAAC;MACxE,OAAOZ,IAAI,CAACC,KAAK,CAACb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC;IACnE;EACF;AACF,CAAC;AAED,eAAeK,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}