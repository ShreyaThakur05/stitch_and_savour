{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config/config';\nconst API_URL = config.API_URL;\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const userService = {\n  // Update user profile - save to both backend and localStorage\n  updateProfile: async userData => {\n    try {\n      // Try to save to backend first\n      const response = await api.put('/users/profile', userData);\n\n      // Update localStorage\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...userData\n      };\n      localStorage.setItem('stitch_savour_user', JSON.stringify(updatedUser));\n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage only\n      console.warn('Backend unavailable, updating localStorage only:', error.message);\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...userData,\n        isLocal: true\n      };\n      localStorage.setItem('stitch_savour_user', JSON.stringify(updatedUser));\n      return {\n        success: true,\n        user: updatedUser\n      };\n    }\n  },\n  // Get user profile\n  getProfile: async () => {\n    try {\n      const response = await api.get('/users/profile');\n\n      // Update localStorage with latest data\n      localStorage.setItem('stitch_savour_user', JSON.stringify(response.data.user));\n      return response.data;\n    } catch (error) {\n      console.warn('Backend unavailable, using localStorage:', error.message);\n      const localUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      return {\n        user: localUser\n      };\n    }\n  },\n  // Change password\n  changePassword: async passwordData => {\n    try {\n      const response = await api.put('/users/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to change password');\n    }\n  }\n};\nexport default userService;","map":{"version":3,"names":["axios","config","API_URL","api","create","baseURL","headers","interceptors","request","use","token","localStorage","getItem","Authorization","error","Promise","reject","userService","updateProfile","userData","response","put","currentUser","JSON","parse","updatedUser","setItem","stringify","data","console","warn","message","isLocal","success","user","getProfile","get","localUser","changePassword","passwordData","_error$response","_error$response$data","Error"],"sources":["d:/project1/stitch_and_savour/frontend/src/services/userService.js"],"sourcesContent":["import axios from 'axios';\n\nimport { config } from '../config/config';\n\nconst API_URL = config.API_URL;\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport const userService = {\n  // Update user profile - save to both backend and localStorage\n  updateProfile: async (userData) => {\n    try {\n      // Try to save to backend first\n      const response = await api.put('/users/profile', userData);\n      \n      // Update localStorage\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const updatedUser = { ...currentUser, ...userData };\n      localStorage.setItem('stitch_savour_user', JSON.stringify(updatedUser));\n      \n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage only\n      console.warn('Backend unavailable, updating localStorage only:', error.message);\n      const currentUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      const updatedUser = { ...currentUser, ...userData, isLocal: true };\n      localStorage.setItem('stitch_savour_user', JSON.stringify(updatedUser));\n      \n      return { success: true, user: updatedUser };\n    }\n  },\n\n  // Get user profile\n  getProfile: async () => {\n    try {\n      const response = await api.get('/users/profile');\n      \n      // Update localStorage with latest data\n      localStorage.setItem('stitch_savour_user', JSON.stringify(response.data.user));\n      \n      return response.data;\n    } catch (error) {\n      console.warn('Backend unavailable, using localStorage:', error.message);\n      const localUser = JSON.parse(localStorage.getItem('stitch_savour_user') || '{}');\n      return { user: localUser };\n    }\n  },\n\n  // Change password\n  changePassword: async (passwordData) => {\n    try {\n      const response = await api.put('/users/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to change password');\n    }\n  }\n};\n\nexport default userService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}