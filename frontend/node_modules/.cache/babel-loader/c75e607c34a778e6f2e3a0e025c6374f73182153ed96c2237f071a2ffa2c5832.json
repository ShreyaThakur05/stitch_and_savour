{"ast":null,"code":"// Payment Service with Auto-detection and Gateway Integration\nclass PaymentService {\n  constructor() {\n    this.upiId = 'shreyathakurindia@okhdfcbank'; // Your HDFC Bank UPI ID\n    this.merchantName = 'Stitch & Savour';\n    this.merchantPhone = '9970944685'; // Your phone number\n    this.supportedGateways = ['razorpay', 'phonepe', 'paytm', 'gpay'];\n  }\n\n  // Generate dynamic UPI payment URL with amount\n  generateUPIUrl(amount, orderId, customerName) {\n    const params = new URLSearchParams({\n      pa: this.upiId,\n      pn: this.merchantName,\n      tr: orderId,\n      tn: `Payment for Order ${orderId} - ${customerName}`,\n      am: amount.toString(),\n      cu: 'INR',\n      mc: '5411' // Merchant category code for grocery stores\n    });\n    return `upi://pay?${params.toString()}`;\n  }\n\n  // Generate QR code data URL\n  async generateQRCode(amount, orderId, customerName) {\n    const upiUrl = this.generateUPIUrl(amount, orderId, customerName);\n    try {\n      // Using QR Server API for dynamic QR generation\n      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(upiUrl)}`;\n      return qrApiUrl;\n    } catch (error) {\n      console.error('QR generation error:', error);\n      return null;\n    }\n  }\n\n  // Auto-detect available payment apps\n  detectPaymentApps() {\n    const apps = [];\n\n    // Check for installed UPI apps (basic detection)\n    const appChecks = [{\n      name: 'PhonePe',\n      package: 'phonepe',\n      url: 'phonepe://'\n    }, {\n      name: 'Google Pay',\n      package: 'gpay',\n      url: 'tez://'\n    }, {\n      name: 'Paytm',\n      package: 'paytm',\n      url: 'paytmmp://'\n    }, {\n      name: 'BHIM',\n      package: 'bhim',\n      url: 'bhim://'\n    }, {\n      name: 'Amazon Pay',\n      package: 'amazonpay',\n      url: 'amazonpay://'\n    }];\n    appChecks.forEach(app => {\n      apps.push({\n        ...app,\n        available: true,\n        // In real implementation, check if app is installed\n        icon: `/images/payment-icons/${app.package}.png`\n      });\n    });\n    return apps;\n  }\n\n  // Launch specific payment app\n  launchPaymentApp(appUrl, amount, orderId, customerName) {\n    const upiUrl = this.generateUPIUrl(amount, orderId, customerName);\n\n    // Try to open the specific app\n    const appSpecificUrl = appUrl.replace('://', `://upi/pay?${new URL(upiUrl).search.substring(1)}`);\n    try {\n      window.location.href = appSpecificUrl;\n\n      // Fallback to generic UPI URL after 2 seconds\n      setTimeout(() => {\n        window.location.href = upiUrl;\n      }, 2000);\n    } catch (error) {\n      // Fallback to generic UPI URL\n      window.location.href = upiUrl;\n    }\n  }\n\n  // Initialize Razorpay (if you want to integrate)\n  async initializeRazorpay(amount, orderId, customerInfo) {\n    if (!window.Razorpay) {\n      // Load Razorpay script dynamically\n      await this.loadScript('https://checkout.razorpay.com/v1/checkout.js');\n    }\n    const options = {\n      key: 'YOUR_RAZORPAY_KEY',\n      // Replace with your Razorpay key\n      amount: amount * 100,\n      // Amount in paise\n      currency: 'INR',\n      name: this.merchantName,\n      description: `Order ${orderId}`,\n      order_id: orderId,\n      handler: response => {\n        this.handlePaymentSuccess(response);\n      },\n      prefill: {\n        name: customerInfo.name,\n        email: customerInfo.email,\n        contact: customerInfo.phone\n      },\n      theme: {\n        color: '#8B5CF6'\n      }\n    };\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  }\n\n  // Load external script\n  loadScript(src) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  // Handle payment success\n  handlePaymentSuccess(response) {\n    console.log('Payment successful:', response);\n    // Trigger success callback\n    if (this.onPaymentSuccess) {\n      this.onPaymentSuccess(response);\n    }\n  }\n\n  // Verify payment status (mock implementation)\n  async verifyPayment(transactionId) {\n    // In real implementation, call your backend to verify payment\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          transactionId,\n          status: 'completed'\n        });\n      }, 2000);\n    });\n  }\n\n  // Real payment verification (to be implemented with backend)\n  async verifyPaymentWithBackend(orderId, transactionId) {\n    // This would call your backend API to verify payment\n    // For now, return success when user confirms\n    return {\n      success: true,\n      orderId,\n      transactionId,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\nconst paymentService = new PaymentService();\nexport default paymentService;","map":{"version":3,"names":["PaymentService","constructor","upiId","merchantName","merchantPhone","supportedGateways","generateUPIUrl","amount","orderId","customerName","params","URLSearchParams","pa","pn","tr","tn","am","toString","cu","mc","generateQRCode","upiUrl","qrApiUrl","encodeURIComponent","error","console","detectPaymentApps","apps","appChecks","name","package","url","forEach","app","push","available","icon","launchPaymentApp","appUrl","appSpecificUrl","replace","URL","search","substring","window","location","href","setTimeout","initializeRazorpay","customerInfo","Razorpay","loadScript","options","key","currency","description","order_id","handler","response","handlePaymentSuccess","prefill","email","contact","phone","theme","color","rzp","open","src","Promise","resolve","reject","script","document","createElement","onload","onerror","head","appendChild","log","onPaymentSuccess","verifyPayment","transactionId","success","status","verifyPaymentWithBackend","timestamp","Date","toISOString","paymentService"],"sources":["d:/project1/stitch_and_savour/frontend/src/services/paymentService.js"],"sourcesContent":["// Payment Service with Auto-detection and Gateway Integration\nclass PaymentService {\n  constructor() {\n    this.upiId = 'shreyathakurindia@okhdfcbank'; // Your HDFC Bank UPI ID\n    this.merchantName = 'Stitch & Savour';\n    this.merchantPhone = '9970944685'; // Your phone number\n    this.supportedGateways = ['razorpay', 'phonepe', 'paytm', 'gpay'];\n  }\n\n  // Generate dynamic UPI payment URL with amount\n  generateUPIUrl(amount, orderId, customerName) {\n    const params = new URLSearchParams({\n      pa: this.upiId,\n      pn: this.merchantName,\n      tr: orderId,\n      tn: `Payment for Order ${orderId} - ${customerName}`,\n      am: amount.toString(),\n      cu: 'INR',\n      mc: '5411' // Merchant category code for grocery stores\n    });\n    \n    return `upi://pay?${params.toString()}`;\n  }\n\n  // Generate QR code data URL\n  async generateQRCode(amount, orderId, customerName) {\n    const upiUrl = this.generateUPIUrl(amount, orderId, customerName);\n    \n    try {\n      // Using QR Server API for dynamic QR generation\n      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(upiUrl)}`;\n      return qrApiUrl;\n    } catch (error) {\n      console.error('QR generation error:', error);\n      return null;\n    }\n  }\n\n  // Auto-detect available payment apps\n  detectPaymentApps() {\n    const apps = [];\n    \n    // Check for installed UPI apps (basic detection)\n    const appChecks = [\n      { name: 'PhonePe', package: 'phonepe', url: 'phonepe://' },\n      { name: 'Google Pay', package: 'gpay', url: 'tez://' },\n      { name: 'Paytm', package: 'paytm', url: 'paytmmp://' },\n      { name: 'BHIM', package: 'bhim', url: 'bhim://' },\n      { name: 'Amazon Pay', package: 'amazonpay', url: 'amazonpay://' }\n    ];\n\n    appChecks.forEach(app => {\n      apps.push({\n        ...app,\n        available: true, // In real implementation, check if app is installed\n        icon: `/images/payment-icons/${app.package}.png`\n      });\n    });\n\n    return apps;\n  }\n\n  // Launch specific payment app\n  launchPaymentApp(appUrl, amount, orderId, customerName) {\n    const upiUrl = this.generateUPIUrl(amount, orderId, customerName);\n    \n    // Try to open the specific app\n    const appSpecificUrl = appUrl.replace('://', `://upi/pay?${new URL(upiUrl).search.substring(1)}`);\n    \n    try {\n      window.location.href = appSpecificUrl;\n      \n      // Fallback to generic UPI URL after 2 seconds\n      setTimeout(() => {\n        window.location.href = upiUrl;\n      }, 2000);\n    } catch (error) {\n      // Fallback to generic UPI URL\n      window.location.href = upiUrl;\n    }\n  }\n\n  // Initialize Razorpay (if you want to integrate)\n  async initializeRazorpay(amount, orderId, customerInfo) {\n    if (!window.Razorpay) {\n      // Load Razorpay script dynamically\n      await this.loadScript('https://checkout.razorpay.com/v1/checkout.js');\n    }\n\n    const options = {\n      key: 'YOUR_RAZORPAY_KEY', // Replace with your Razorpay key\n      amount: amount * 100, // Amount in paise\n      currency: 'INR',\n      name: this.merchantName,\n      description: `Order ${orderId}`,\n      order_id: orderId,\n      handler: (response) => {\n        this.handlePaymentSuccess(response);\n      },\n      prefill: {\n        name: customerInfo.name,\n        email: customerInfo.email,\n        contact: customerInfo.phone\n      },\n      theme: {\n        color: '#8B5CF6'\n      }\n    };\n\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  }\n\n  // Load external script\n  loadScript(src) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  // Handle payment success\n  handlePaymentSuccess(response) {\n    console.log('Payment successful:', response);\n    // Trigger success callback\n    if (this.onPaymentSuccess) {\n      this.onPaymentSuccess(response);\n    }\n  }\n\n  // Verify payment status (mock implementation)\n  async verifyPayment(transactionId) {\n    // In real implementation, call your backend to verify payment\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          transactionId,\n          status: 'completed'\n        });\n      }, 2000);\n    });\n  }\n\n  // Real payment verification (to be implemented with backend)\n  async verifyPaymentWithBackend(orderId, transactionId) {\n    // This would call your backend API to verify payment\n    // For now, return success when user confirms\n    return {\n      success: true,\n      orderId,\n      transactionId,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\nconst paymentService = new PaymentService();\nexport default paymentService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}