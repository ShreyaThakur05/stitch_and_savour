{"ast":null,"code":"import _objectSpread from\"d:/project1/stitch_and_savour/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';import{config}from'../config/config';const API_URL=config.API_URL;const api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});export const contactService={// Submit contact message - save to both backend and localStorage\nsubmitMessage:async messageData=>{try{// Try to save to backend first\nconst response=await api.post('/contact/submit',messageData);// Also save to localStorage for user reference\nconst existingMessages=JSON.parse(localStorage.getItem('contactMessages')||'[]');existingMessages.push(_objectSpread(_objectSpread({},messageData),{},{id:response.data.message._id,createdAt:response.data.message.createdAt,status:'sent'}));localStorage.setItem('contactMessages',JSON.stringify(existingMessages));return response.data;}catch(error){// Fallback to localStorage if backend fails\nconsole.warn('Backend unavailable, saving message locally:',error.message);const localMessage=_objectSpread(_objectSpread({},messageData),{},{id:'local_'+Date.now(),createdAt:new Date().toISOString(),status:'pending',isLocal:true});const existingMessages=JSON.parse(localStorage.getItem('contactMessages')||'[]');existingMessages.push(localMessage);localStorage.setItem('contactMessages',JSON.stringify(existingMessages));return{success:true,message:localMessage};}},// Get user's contact messages\ngetUserMessages:async()=>{try{const response=await api.get('/contact/user');// Merge with local messages\nconst localMessages=JSON.parse(localStorage.getItem('contactMessages')||'[]').filter(m=>m.isLocal);return[...response.data.messages,...localMessages];}catch(error){console.warn('Backend unavailable, using local messages:',error.message);return JSON.parse(localStorage.getItem('contactMessages')||'[]');}}};export default contactService;","map":{"version":3,"names":["axios","config","API_URL","api","create","baseURL","headers","contactService","submitMessage","messageData","response","post","existingMessages","JSON","parse","localStorage","getItem","push","_objectSpread","id","data","message","_id","createdAt","status","setItem","stringify","error","console","warn","localMessage","Date","now","toISOString","isLocal","success","getUserMessages","get","localMessages","filter","m","messages"],"sources":["d:/project1/stitch_and_savour/frontend/src/services/contactService.js"],"sourcesContent":["import axios from 'axios';\n\nimport { config } from '../config/config';\n\nconst API_URL = config.API_URL;\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const contactService = {\n  // Submit contact message - save to both backend and localStorage\n  submitMessage: async (messageData) => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/contact/submit', messageData);\n      \n      // Also save to localStorage for user reference\n      const existingMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');\n      existingMessages.push({\n        ...messageData,\n        id: response.data.message._id,\n        createdAt: response.data.message.createdAt,\n        status: 'sent'\n      });\n      localStorage.setItem('contactMessages', JSON.stringify(existingMessages));\n      \n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving message locally:', error.message);\n      const localMessage = {\n        ...messageData,\n        id: 'local_' + Date.now(),\n        createdAt: new Date().toISOString(),\n        status: 'pending',\n        isLocal: true\n      };\n      \n      const existingMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');\n      existingMessages.push(localMessage);\n      localStorage.setItem('contactMessages', JSON.stringify(existingMessages));\n      \n      return { success: true, message: localMessage };\n    }\n  },\n\n  // Get user's contact messages\n  getUserMessages: async () => {\n    try {\n      const response = await api.get('/contact/user');\n      \n      // Merge with local messages\n      const localMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]')\n        .filter(m => m.isLocal);\n      \n      return [...response.data.messages, ...localMessages];\n    } catch (error) {\n      console.warn('Backend unavailable, using local messages:', error.message);\n      return JSON.parse(localStorage.getItem('contactMessages') || '[]');\n    }\n  }\n};\n\nexport default contactService;"],"mappings":"2HAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,MAAM,KAAQ,kBAAkB,CAEzC,KAAM,CAAAC,OAAO,CAAGD,MAAM,CAACC,OAAO,CAE9B,KAAM,CAAAC,GAAG,CAAGH,KAAK,CAACI,MAAM,CAAC,CACvBC,OAAO,CAAEH,OAAO,CAChBI,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5B;AACAC,aAAa,CAAE,KAAO,CAAAC,WAAW,EAAK,CACpC,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,IAAI,CAAC,iBAAiB,CAAEF,WAAW,CAAC,CAE/D;AACA,KAAM,CAAAG,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAI,IAAI,CAAC,CACpFJ,gBAAgB,CAACK,IAAI,CAAAC,aAAA,CAAAA,aAAA,IAChBT,WAAW,MACdU,EAAE,CAAET,QAAQ,CAACU,IAAI,CAACC,OAAO,CAACC,GAAG,CAC7BC,SAAS,CAAEb,QAAQ,CAACU,IAAI,CAACC,OAAO,CAACE,SAAS,CAC1CC,MAAM,CAAE,MAAM,EACf,CAAC,CACFT,YAAY,CAACU,OAAO,CAAC,iBAAiB,CAAEZ,IAAI,CAACa,SAAS,CAACd,gBAAgB,CAAC,CAAC,CAEzE,MAAO,CAAAF,QAAQ,CAACU,IAAI,CACtB,CAAE,MAAOO,KAAK,CAAE,CACd;AACAC,OAAO,CAACC,IAAI,CAAC,8CAA8C,CAAEF,KAAK,CAACN,OAAO,CAAC,CAC3E,KAAM,CAAAS,YAAY,CAAAZ,aAAA,CAAAA,aAAA,IACbT,WAAW,MACdU,EAAE,CAAE,QAAQ,CAAGY,IAAI,CAACC,GAAG,CAAC,CAAC,CACzBT,SAAS,CAAE,GAAI,CAAAQ,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CACnCT,MAAM,CAAE,SAAS,CACjBU,OAAO,CAAE,IAAI,EACd,CAED,KAAM,CAAAtB,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAI,IAAI,CAAC,CACpFJ,gBAAgB,CAACK,IAAI,CAACa,YAAY,CAAC,CACnCf,YAAY,CAACU,OAAO,CAAC,iBAAiB,CAAEZ,IAAI,CAACa,SAAS,CAACd,gBAAgB,CAAC,CAAC,CAEzE,MAAO,CAAEuB,OAAO,CAAE,IAAI,CAAEd,OAAO,CAAES,YAAa,CAAC,CACjD,CACF,CAAC,CAED;AACAM,eAAe,CAAE,KAAAA,CAAA,GAAY,CAC3B,GAAI,CACF,KAAM,CAAA1B,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACkC,GAAG,CAAC,eAAe,CAAC,CAE/C;AACA,KAAM,CAAAC,aAAa,CAAGzB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAI,IAAI,CAAC,CAC9EuB,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACN,OAAO,CAAC,CAEzB,MAAO,CAAC,GAAGxB,QAAQ,CAACU,IAAI,CAACqB,QAAQ,CAAE,GAAGH,aAAa,CAAC,CACtD,CAAE,MAAOX,KAAK,CAAE,CACdC,OAAO,CAACC,IAAI,CAAC,4CAA4C,CAAEF,KAAK,CAACN,OAAO,CAAC,CACzE,MAAO,CAAAR,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAI,IAAI,CAAC,CACpE,CACF,CACF,CAAC,CAED,cAAe,CAAAT,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}