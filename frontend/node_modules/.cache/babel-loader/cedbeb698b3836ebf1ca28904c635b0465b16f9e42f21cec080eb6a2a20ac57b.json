{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config/config';\nconst API_URL = config.API_URL;\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const contactService = {\n  // Submit contact message - save to both backend and localStorage\n  submitMessage: async messageData => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/contact/submit', messageData);\n\n      // Also save to localStorage for user reference\n      const existingMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');\n      existingMessages.push({\n        ...messageData,\n        id: response.data.message._id,\n        createdAt: response.data.message.createdAt,\n        status: 'sent'\n      });\n      localStorage.setItem('contactMessages', JSON.stringify(existingMessages));\n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving message locally:', error.message);\n      const localMessage = {\n        ...messageData,\n        id: 'local_' + Date.now(),\n        createdAt: new Date().toISOString(),\n        status: 'pending',\n        isLocal: true\n      };\n      const existingMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');\n      existingMessages.push(localMessage);\n      localStorage.setItem('contactMessages', JSON.stringify(existingMessages));\n      return {\n        success: true,\n        message: localMessage\n      };\n    }\n  },\n  // Get user's contact messages\n  getUserMessages: async () => {\n    try {\n      const response = await api.get('/contact/user');\n\n      // Merge with local messages\n      const localMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]').filter(m => m.isLocal);\n      return [...response.data.messages, ...localMessages];\n    } catch (error) {\n      console.warn('Backend unavailable, using local messages:', error.message);\n      return JSON.parse(localStorage.getItem('contactMessages') || '[]');\n    }\n  }\n};\nexport default contactService;","map":{"version":3,"names":["axios","config","API_URL","api","create","baseURL","headers","contactService","submitMessage","messageData","response","post","existingMessages","JSON","parse","localStorage","getItem","push","id","data","message","_id","createdAt","status","setItem","stringify","error","console","warn","localMessage","Date","now","toISOString","isLocal","success","getUserMessages","get","localMessages","filter","m","messages"],"sources":["d:/project1/stitch_and_savour/frontend/src/services/contactService.js"],"sourcesContent":["import axios from 'axios';\n\nimport { config } from '../config/config';\n\nconst API_URL = config.API_URL;\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const contactService = {\n  // Submit contact message - save to both backend and localStorage\n  submitMessage: async (messageData) => {\n    try {\n      // Try to save to backend first\n      const response = await api.post('/contact/submit', messageData);\n      \n      // Also save to localStorage for user reference\n      const existingMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');\n      existingMessages.push({\n        ...messageData,\n        id: response.data.message._id,\n        createdAt: response.data.message.createdAt,\n        status: 'sent'\n      });\n      localStorage.setItem('contactMessages', JSON.stringify(existingMessages));\n      \n      return response.data;\n    } catch (error) {\n      // Fallback to localStorage if backend fails\n      console.warn('Backend unavailable, saving message locally:', error.message);\n      const localMessage = {\n        ...messageData,\n        id: 'local_' + Date.now(),\n        createdAt: new Date().toISOString(),\n        status: 'pending',\n        isLocal: true\n      };\n      \n      const existingMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');\n      existingMessages.push(localMessage);\n      localStorage.setItem('contactMessages', JSON.stringify(existingMessages));\n      \n      return { success: true, message: localMessage };\n    }\n  },\n\n  // Get user's contact messages\n  getUserMessages: async () => {\n    try {\n      const response = await api.get('/contact/user');\n      \n      // Merge with local messages\n      const localMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]')\n        .filter(m => m.isLocal);\n      \n      return [...response.data.messages, ...localMessages];\n    } catch (error) {\n      console.warn('Backend unavailable, using local messages:', error.message);\n      return JSON.parse(localStorage.getItem('contactMessages') || '[]');\n    }\n  }\n};\n\nexport default contactService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAO;AAE9B,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACAC,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;;MAE/D;MACA,MAAMG,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;MACpFJ,gBAAgB,CAACK,IAAI,CAAC;QACpB,GAAGR,WAAW;QACdS,EAAE,EAAER,QAAQ,CAACS,IAAI,CAACC,OAAO,CAACC,GAAG;QAC7BC,SAAS,EAAEZ,QAAQ,CAACS,IAAI,CAACC,OAAO,CAACE,SAAS;QAC1CC,MAAM,EAAE;MACV,CAAC,CAAC;MACFR,YAAY,CAACS,OAAO,CAAC,iBAAiB,EAAEX,IAAI,CAACY,SAAS,CAACb,gBAAgB,CAAC,CAAC;MAEzE,OAAOF,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,IAAI,CAAC,8CAA8C,EAAEF,KAAK,CAACN,OAAO,CAAC;MAC3E,MAAMS,YAAY,GAAG;QACnB,GAAGpB,WAAW;QACdS,EAAE,EAAE,QAAQ,GAAGY,IAAI,CAACC,GAAG,CAAC,CAAC;QACzBT,SAAS,EAAE,IAAIQ,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;QACnCT,MAAM,EAAE,SAAS;QACjBU,OAAO,EAAE;MACX,CAAC;MAED,MAAMrB,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;MACpFJ,gBAAgB,CAACK,IAAI,CAACY,YAAY,CAAC;MACnCd,YAAY,CAACS,OAAO,CAAC,iBAAiB,EAAEX,IAAI,CAACY,SAAS,CAACb,gBAAgB,CAAC,CAAC;MAEzE,OAAO;QAAEsB,OAAO,EAAE,IAAI;QAAEd,OAAO,EAAES;MAAa,CAAC;IACjD;EACF,CAAC;EAED;EACAM,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMP,GAAG,CAACiC,GAAG,CAAC,eAAe,CAAC;;MAE/C;MACA,MAAMC,aAAa,GAAGxB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,CAC9EsB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,OAAO,CAAC;MAEzB,OAAO,CAAC,GAAGvB,QAAQ,CAACS,IAAI,CAACqB,QAAQ,EAAE,GAAGH,aAAa,CAAC;IACtD,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,4CAA4C,EAAEF,KAAK,CAACN,OAAO,CAAC;MACzE,OAAOP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IACpE;EACF;AACF,CAAC;AAED,eAAeT,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}