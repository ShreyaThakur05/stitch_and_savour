{"ast":null,"code":"import _objectSpread from\"d:/project1/stitch_and_savour/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Payment Service with Auto-detection and Gateway Integration\nclass PaymentService{constructor(){this.upiId='shreyathakurindia@okhdfcbank';// Your HDFC Bank UPI ID\nthis.merchantName='Stitch & Savour';this.merchantPhone='9970944685';// Your phone number\nthis.supportedGateways=['razorpay','phonepe','paytm','gpay'];}// Generate dynamic UPI payment URL with amount\ngenerateUPIUrl(amount,orderId,customerName){const params=new URLSearchParams({pa:this.upiId,pn:this.merchantName,tr:orderId,tn:\"Payment for Order \".concat(orderId,\" - \").concat(customerName),am:amount.toString(),cu:'INR',mc:'5411'// Merchant category code for grocery stores\n});return\"upi://pay?\".concat(params.toString());}// Generate QR code data URL\nasync generateQRCode(amount,orderId,customerName){const upiUrl=this.generateUPIUrl(amount,orderId,customerName);try{// Using QR Server API for dynamic QR generation\nconst qrApiUrl=\"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=\".concat(encodeURIComponent(upiUrl));return qrApiUrl;}catch(error){console.error('QR generation error:',error);return null;}}// Auto-detect available payment apps\ndetectPaymentApps(){const apps=[];// Check for installed UPI apps (basic detection)\nconst appChecks=[{name:'PhonePe',package:'phonepe',url:'phonepe://'},{name:'Google Pay',package:'gpay',url:'tez://'},{name:'Paytm',package:'paytm',url:'paytmmp://'},{name:'BHIM',package:'bhim',url:'bhim://'},{name:'Amazon Pay',package:'amazonpay',url:'amazonpay://'}];appChecks.forEach(app=>{apps.push(_objectSpread(_objectSpread({},app),{},{available:true,// In real implementation, check if app is installed\nicon:\"/images/payment-icons/\".concat(app.package,\".png\")}));});return apps;}// Launch specific payment app\nlaunchPaymentApp(appUrl,amount,orderId,customerName){const upiUrl=this.generateUPIUrl(amount,orderId,customerName);// Try to open the specific app\nconst appSpecificUrl=appUrl.replace('://',\"://upi/pay?\".concat(new URL(upiUrl).search.substring(1)));try{window.location.href=appSpecificUrl;// Fallback to generic UPI URL after 2 seconds\nsetTimeout(()=>{window.location.href=upiUrl;},2000);}catch(error){// Fallback to generic UPI URL\nwindow.location.href=upiUrl;}}// Initialize Razorpay (if you want to integrate)\nasync initializeRazorpay(amount,orderId,customerInfo){if(!window.Razorpay){// Load Razorpay script dynamically\nawait this.loadScript('https://checkout.razorpay.com/v1/checkout.js');}const options={key:'YOUR_RAZORPAY_KEY',// Replace with your Razorpay key\namount:amount*100,// Amount in paise\ncurrency:'INR',name:this.merchantName,description:\"Order \".concat(orderId),order_id:orderId,handler:response=>{this.handlePaymentSuccess(response);},prefill:{name:customerInfo.name,email:customerInfo.email,contact:customerInfo.phone},theme:{color:'#8B5CF6'}};const rzp=new window.Razorpay(options);rzp.open();}// Load external script\nloadScript(src){return new Promise((resolve,reject)=>{const script=document.createElement('script');script.src=src;script.onload=resolve;script.onerror=reject;document.head.appendChild(script);});}// Handle payment success\nhandlePaymentSuccess(response){console.log('Payment successful:',response);// Trigger success callback\nif(this.onPaymentSuccess){this.onPaymentSuccess(response);}}// Verify payment status (mock implementation)\nasync verifyPayment(transactionId){// In real implementation, call your backend to verify payment\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({success:true,transactionId,status:'completed'});},2000);});}// Real payment verification (to be implemented with backend)\nasync verifyPaymentWithBackend(orderId,transactionId){// This would call your backend API to verify payment\n// For now, return success when user confirms\nreturn{success:true,orderId,transactionId,timestamp:new Date().toISOString()};}}const paymentService=new PaymentService();export default paymentService;","map":{"version":3,"names":["PaymentService","constructor","upiId","merchantName","merchantPhone","supportedGateways","generateUPIUrl","amount","orderId","customerName","params","URLSearchParams","pa","pn","tr","tn","concat","am","toString","cu","mc","generateQRCode","upiUrl","qrApiUrl","encodeURIComponent","error","console","detectPaymentApps","apps","appChecks","name","package","url","forEach","app","push","_objectSpread","available","icon","launchPaymentApp","appUrl","appSpecificUrl","replace","URL","search","substring","window","location","href","setTimeout","initializeRazorpay","customerInfo","Razorpay","loadScript","options","key","currency","description","order_id","handler","response","handlePaymentSuccess","prefill","email","contact","phone","theme","color","rzp","open","src","Promise","resolve","reject","script","document","createElement","onload","onerror","head","appendChild","log","onPaymentSuccess","verifyPayment","transactionId","success","status","verifyPaymentWithBackend","timestamp","Date","toISOString","paymentService"],"sources":["d:/project1/stitch_and_savour/frontend/src/services/paymentService.js"],"sourcesContent":["// Payment Service with Auto-detection and Gateway Integration\nclass PaymentService {\n  constructor() {\n    this.upiId = 'shreyathakurindia@okhdfcbank'; // Your HDFC Bank UPI ID\n    this.merchantName = 'Stitch & Savour';\n    this.merchantPhone = '9970944685'; // Your phone number\n    this.supportedGateways = ['razorpay', 'phonepe', 'paytm', 'gpay'];\n  }\n\n  // Generate dynamic UPI payment URL with amount\n  generateUPIUrl(amount, orderId, customerName) {\n    const params = new URLSearchParams({\n      pa: this.upiId,\n      pn: this.merchantName,\n      tr: orderId,\n      tn: `Payment for Order ${orderId} - ${customerName}`,\n      am: amount.toString(),\n      cu: 'INR',\n      mc: '5411' // Merchant category code for grocery stores\n    });\n    \n    return `upi://pay?${params.toString()}`;\n  }\n\n  // Generate QR code data URL\n  async generateQRCode(amount, orderId, customerName) {\n    const upiUrl = this.generateUPIUrl(amount, orderId, customerName);\n    \n    try {\n      // Using QR Server API for dynamic QR generation\n      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(upiUrl)}`;\n      return qrApiUrl;\n    } catch (error) {\n      console.error('QR generation error:', error);\n      return null;\n    }\n  }\n\n  // Auto-detect available payment apps\n  detectPaymentApps() {\n    const apps = [];\n    \n    // Check for installed UPI apps (basic detection)\n    const appChecks = [\n      { name: 'PhonePe', package: 'phonepe', url: 'phonepe://' },\n      { name: 'Google Pay', package: 'gpay', url: 'tez://' },\n      { name: 'Paytm', package: 'paytm', url: 'paytmmp://' },\n      { name: 'BHIM', package: 'bhim', url: 'bhim://' },\n      { name: 'Amazon Pay', package: 'amazonpay', url: 'amazonpay://' }\n    ];\n\n    appChecks.forEach(app => {\n      apps.push({\n        ...app,\n        available: true, // In real implementation, check if app is installed\n        icon: `/images/payment-icons/${app.package}.png`\n      });\n    });\n\n    return apps;\n  }\n\n  // Launch specific payment app\n  launchPaymentApp(appUrl, amount, orderId, customerName) {\n    const upiUrl = this.generateUPIUrl(amount, orderId, customerName);\n    \n    // Try to open the specific app\n    const appSpecificUrl = appUrl.replace('://', `://upi/pay?${new URL(upiUrl).search.substring(1)}`);\n    \n    try {\n      window.location.href = appSpecificUrl;\n      \n      // Fallback to generic UPI URL after 2 seconds\n      setTimeout(() => {\n        window.location.href = upiUrl;\n      }, 2000);\n    } catch (error) {\n      // Fallback to generic UPI URL\n      window.location.href = upiUrl;\n    }\n  }\n\n  // Initialize Razorpay (if you want to integrate)\n  async initializeRazorpay(amount, orderId, customerInfo) {\n    if (!window.Razorpay) {\n      // Load Razorpay script dynamically\n      await this.loadScript('https://checkout.razorpay.com/v1/checkout.js');\n    }\n\n    const options = {\n      key: 'YOUR_RAZORPAY_KEY', // Replace with your Razorpay key\n      amount: amount * 100, // Amount in paise\n      currency: 'INR',\n      name: this.merchantName,\n      description: `Order ${orderId}`,\n      order_id: orderId,\n      handler: (response) => {\n        this.handlePaymentSuccess(response);\n      },\n      prefill: {\n        name: customerInfo.name,\n        email: customerInfo.email,\n        contact: customerInfo.phone\n      },\n      theme: {\n        color: '#8B5CF6'\n      }\n    };\n\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  }\n\n  // Load external script\n  loadScript(src) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  // Handle payment success\n  handlePaymentSuccess(response) {\n    console.log('Payment successful:', response);\n    // Trigger success callback\n    if (this.onPaymentSuccess) {\n      this.onPaymentSuccess(response);\n    }\n  }\n\n  // Verify payment status (mock implementation)\n  async verifyPayment(transactionId) {\n    // In real implementation, call your backend to verify payment\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          transactionId,\n          status: 'completed'\n        });\n      }, 2000);\n    });\n  }\n\n  // Real payment verification (to be implemented with backend)\n  async verifyPaymentWithBackend(orderId, transactionId) {\n    // This would call your backend API to verify payment\n    // For now, return success when user confirms\n    return {\n      success: true,\n      orderId,\n      transactionId,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\nconst paymentService = new PaymentService();\nexport default paymentService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}